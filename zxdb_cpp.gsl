.#   zxdb_cpp.gsl
.#
.#   Generates a tntdb class abstraction
.#
.
.for property
.    if type = "string"
.        property.size ?= -1
.        property.ctype = "std::string"
.        property.tnttype = "String"
.        if property.size > 0
.            property.sqltype = "VARCHAR($(size))"
.        else
.            property.sqltype = "TEXT"
.        endif
.    elsif type = "number"
.        property.size ?= 4
.        property.signed ?= "yes"
.        if property.size = 4
.            if property.signed = "no"
.                property.tnttype = "Unsigned32"
.                property.ctype = "uint32_t"
.                property.sqltype = "INTEGER UNSIGNED"
.            else
.                property.tnttype = "Int32"
.                property.ctype = "int32_t"
.                property.sqltype = "INTEGER"
.            endif
.        elsif property.size = 2
.            if property.signed = "yes"
.                property.ctype = "int16_t"
.                property.tnttype = "Int32"
.                property.sqltype = "SMALLINT"
.            else
.                property.ctype = "uint16_t"
.                property.tnttype = "Unsigned32"
.                property.sqltype = "SMALLINT UNSIGNED"
.            endif
.        elsif property.size = 8
.            if property.signed = "yes"
.                property.ctype = "int64_t"
.                property.tnttype = "Int64"
.                property.sqltype = "BIGINT"
.            else
.                property.ctype = "uint64_t"
.                property.tnttype = "Unsigned64"
.                property.sqltype = "BIGINT UNSIGNED"
.            endif
.        else
.            echo "E: bad size $(size) for $(name)"
.        endif
.    endif
.endfor
.
.gsl from "zxdb_class_hpp.gsl"
.gsl from "zxdb_class_cpp.gsl"
.gsl from "zxdb_class_test_cpp.gsl"
