.echo "Generating $(class.name).cpp..."
.output "$(class.name).cpp"
/**
 * \file $(class.name).cpp
 *
 * \brief Implementation of $(class.name)
 *
 * $(class.title:)
 *
 */

/***** WARNING **************************************************************
 *                                                                          *
 * THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose *
 * your changes at the next build cycle. This is great for temporary printf *
 * statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places *
 * for commits are:                                                         *
 *                                                                          *
 * - The XML model used for this code generation: $(filename), or           *
 * - The generation script that built this file: $(script)                  *
 *                                                                          *
 ***************************************************************************/

/*
  ==========================================================================
. for class.license
  $(string.trim (license.):block                                           )
. endfor
  ==========================================================================
*/

#include "$(class.name).hpp"
.for has_many
#include "$(name).hpp"
.endfor
.for belongs_to
#include "$(name).hpp"
.endfor

bool $(class.Name)::table_exists = false;

extern std::string db_url;

//! Save object into database
void $(class.Name)::save() {
    tntdb::Connection conn = tntdb::connectCached(db_url);
    tntdb::Statement smt;

    // Update stuff in databse
    smt = conn.prepareCached("UPDATE $(class.name)s SET "
.for property
                             "$(name) = :$(name) "
.if !last() | count(class.belongs_to) > 0
                             ","
.endif
.endfor
.for belongs_to
                             "$(name)_id = :$(name)_id$(!last() ?? ",") "
.endfor
                             " WHERE id = :id\");
    smt
.for property
        .set$(tnttype:)("$(name)", $(name))
.endfor
.for belongs_to
        .setInt("$(name)_id", $(name)_id)
.endfor
        .set("id", db_id)
        .execute();
}

.for has_many
//! Get all $(name)s belonging to this $(class.name)
std::vector<$(Name)> $(class.Name)::get_$(name)s() const {
    int id = db_id;
    $(Name)::db_init();
    auto ret = $(Name)::search("$(class.name)_id = :$(class.name)_id",
        [id](tntdb::Statement& st) { st.setInt("$(class.name)_id", id); } );
    return ret;
}

//! Add new $(name) to this $(class.name)
void $(class.Name)::add_$(name)($(Name)& $(name)) {
    $(name).set_parent_$(class.name)_id(db_id);
}

.endfor
.for belongs_to
//! Set $(class.Name)::id of parent $(name)
void $(class.Name)::set_parent_$(name)_id(int id) {
    $(name)_id = id;
    dirty = true;
}

//! Get id of parent $(name)
int $(class.Name)::get_parent_$(name)_id() const {
    return $(name)_id;
}

//! Set parent $(name)
void $(class.Name)::set_parent_$(name)(const $(Name) parent) {
    set_parent_$(name)_id(parent.get_db_id());
}

//! Get parent $(name)
$(Name) $(class.Name)::get_parent_$(name)() const {
    return $(Name)::get_by_id(get_parent_$(name)_id());
}

.endfor
.for property
//! Setter for $(name)
$(ctype)& $(class.Name)::set_$(name)(const $(ctype) val) {
    $(name) = val;
    dirty = true;
    return $(name);
}

//! Getter for $(name)
$(ctype)  $(class.Name)::get_$(name)() const {
    return $(name);
}

.endfor
//! Equality comparison
bool $(class.Name)::operator==(const $(class.Name)& other) const {
    return
.for property
        $(name) == (other.$(name))$(!last() ?? " &&" ? ";")
.endfor
}

//! Checks whether table exists and is correct
void $(class.Name)::db_init() {
    if(table_exists)
        return;

    tntdb::Connection conn = tntdb::connectCached(db_url);
    tntdb::Statement smt;

    // Create database if does not exist
    smt = conn.prepare("CREATE TABLE IF NOT EXISTS $(class.name)s ( "
                       "id INTEGER PRIMARY KEY AUTOINCREMENT "
.for property
                       ", $(name) $(SQLTYPE) "
.endfor
.for belongs_to
                       ", $(name)_id INTEGER DEFAULT 0"
.endfor
                       " ) ");
    smt.execute();

    table_exists = true;
}

//! Assignment operator
$(class.Name)& $(class.Name)::operator=(const $(class.Name)& other) {
.for property
    $(name) = other.$(name);
.endfor
    dirty = true;
    return (*this);
}

//! Exporting structure for future import
void $(class.Name)::serialize(cxxtools::SerializationInfo& si) {
.for property
    si.addMember("$(name)").setValue(get_$(name)());
.endfor
.for has_many
    cxxtools::SerializationInfo& nsi = si.addMember("$(name)");
    {
        auto list = get_$(name)s();
        for(auto i: list) {
            i.serialize(nsi.addMember(""));
        }
    }
    nsi.setTypeName("set");
    nsi.setCategory(cxxtools::SerializationInfo::Array);
.endfor
}

//! Importing previously exported structure
$(class.Name) $(class.Name)::deserialize(const cxxtools::SerializationInfo& si) {
.for property
    $(ctype) in_$(name);
    si.getMember("$(name)") >>= in_$(name);
.endfor
    $(class.Name) f(
.for property
        in_$(name)$(!last() ?? ",")
.endfor
    );
.for has_many
    {
        auto msi = si.getMember("$(name)");
        for(auto it : msi) {
            $(Name) tmp = $(Name)::deserialize(it);
            tmp.set_parent_$(class.name)(f);
        }
    }
.endfor
    return f;
}

//! Default constructor
$(class.Name)::$(class.Name)(
.for property
            const $(ctype)& in_$(name)$(last() ?? ") {" ? ",")
.endfor
    db_init();
    db_id = 0;
    dirty = false;
.for property
    $(name) = in_$(name);
.endfor

    tntdb::Connection conn = tntdb::connectCached(db_url);
    tntdb::Statement smt;
    tntdb::Row row;

    // Add into database if doesn't exists
    smt = conn.prepareCached("INSERT INTO $(class.name)s ( "
.for property
.if last() & count(class.belongs_to) = 0
                             "$(name) ) "
.else
                             "$(name), "
.endif
.endfor
.for belongs_to
                             "$(name)_id$(last() ?? ")" ? ",") "
.endfor
                             "SELECT "
.for property
.if last() & count(class.belongs_to) = 0
                             ":$(name) "
.else
                             ":$(name), "
.endif
.endfor
.for belongs_to
                             "0$(!last() ?? ",") "
.endfor
                             "WHERE 1 NOT IN "
                             "(SELECT 1 FROM $(class.name)s WHERE "
.for property
                             "$(name) = :$(name)$(last() ?? " LIMIT 1)\");" ? " AND \"")
.endfor
    smt
.for property
        .set$(tnttype:)("$(name)", $(name))
.endfor
        .execute();

    // Get ID from the database
    smt = conn.prepareCached("SELECT "
                             "  id "
.for belongs_to
                             ", $(name)_id "
.endfor
                             " FROM $(class.name)s WHERE "
.for property
                             "$(name) = :$(name)$(last() ?? " LIMIT 1\");" ? " AND \"")
.endfor
    row = smt
.for property
        .set$(tnttype:)("$(name)", $(name))
.endfor
        .selectRow();
    db_id = 0;
    row[0].get(db_id);
.for belongs_to
    $(name)_id = 0;
    row[$(index())].get($(name)_id);
.endfor
}

//! Runs specified function on every matching element
void $(class.Name)::for_each(std::function<void($(class.Name))> what,
        std::string where,
        std::function<void(tntdb::Statement&)> set) {

    tntdb::Connection conn = tntdb::connectCached(db_url);
    tntdb::Statement smt;

    db_init();

    // Query data
    std::string query = "SELECT id "
.for property
                             ", $(name) "
.endfor
.for belongs_to
                             ", $(name)_id "
.endfor
                             " FROM $(class.name)s ";
    if(!where.empty()) {
        query += " WHERE ";
        query += where;
    }
    smt = conn.prepareCached(query);
    set(smt);

    // Construct response
    for(auto row: smt) {
        $(class.Name) it(
              row.getUnsigned64("id")
.for property
            , row.get$(tnttype:)("$(name)")
.endfor
.for belongs_to
            , row.getInt("$(name)_id")
.endfor
        );
        what(it);
    }
}

//! Returns element specified by it's database id
$(class.Name) $(class.Name)::get_by_id(uint64_t id) {

    std::vector<$(class.Name)> ret = $(class.Name)::search(
        "id = :id",
        [&id](tntdb::Statement& st) { st.setInt("id", id); }
    );
    return ret.front();
}

//! Deletes specified elements
void $(class.Name)::remove(std::string where,
    std::function<void(tntdb::Statement&)> set) {

    tntdb::Connection conn = tntdb::connectCached(db_url);
    tntdb::Statement smt;

    db_init();

    // Query data
    std::string query = "DELETE FROM $(class.name)s";
    if(!where.empty()) {
        query += " WHERE ";
        query += where;
    }
    smt = conn.prepareCached(query);
    set(smt);
    smt.execute();
}
